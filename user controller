package com.example.usermanagement.controller;

        import com.example.usermanagement.model.User;
        import com.example.usermanagement.repository.UserRepository;
        import jakarta.validation.Valid;
        import org.springframework.beans.factory.annotation.Autowired;
        import org.springframework.http.ResponseEntity;
        import org.springframework.web.bind.annotation.*;

        import java.util.List;

        @RestController
        @RequestMapping("/api/users")
        public class UserController {
        @Autowired
        private UserRepository userRepository;

        @PostMapping
        public ResponseEntity<User> createUser(@Valid @RequestBody User user) {
    User savedUser = userRepository.save(user);
    return ResponseEntity.ok(savedUser);
    }
    
    @GetMapping
    public List<User> getAllUsers() {
        return userRepository.findAll();
        }
        
        @GetMapping("/{id}")
        public ResponseEntity<User> getUserById(@PathVariable Long id) {
            return userRepository.findById(id)
            .map(ResponseEntity::ok)
            .orElse(ResponseEntity.notFound().build());
            }
            
            @PutMapping("/{id}")
            public ResponseEntity<User> updateUser(@PathVariable Long id, @Valid @RequestBody User userDetails) {
                return userRepository.findById(id).map(user -> {
                user.setName(userDetails.getName());
                user.setEmail(userDetails.getEmail());
                user.setPhone(userDetails.getPhone());
                User updatedUser = userRepository.save(user);
                return ResponseEntity.ok(updatedUser);
                }).orElse(ResponseEntity.notFound().build());
                }
                
                @DeleteMapping("/{id}")
                public ResponseEntity<Void> deleteUser(@PathVariable Long id) {
                    return userRepository.findById(id).map(user -> {
                    userRepository.delete(user);
                    return ResponseEntity.noContent().build();
                    }).orElse(ResponseEntity.notFound().build());
                    }
                    }
